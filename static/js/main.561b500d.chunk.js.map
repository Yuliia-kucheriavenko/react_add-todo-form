{"version":3,"sources":["components/UserInfo/UserInfo.tsx","components/TodoInfo/TodoInfo.tsx","components/TodoList/TodoList.tsx","api/users.ts","App.tsx","api/todos.ts","index.tsx"],"names":["UserInfo","user","email","name","className","href","TodoInfo","todo","id","title","completed","cn","TodoList","todos","map","username","getTodos","userId","usersFromServer","find","App","useState","setTodos","setTitle","userSelect","setUserSelect","isTitleValid","setIsTitleValid","isUserValid","setIsUserValid","action","method","onSubmit","event","preventDefault","currentTodos","userName","maxTodoId","Math","max","newTodo","type","value","placeholder","onChange","target","disabled","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.561b500d.chunk.js","sourcesContent":["import React from 'react';\nimport { User } from '../../types/User';\n\ntype Props = {\n  user: User;\n};\n\nexport const UserInfo: React.FC<Props> = ({ user }) => {\n  const { email, name } = user;\n\n  return (\n    <a className=\"UserInfo\" href={`mailto:${email}`}>\n      {name}\n    </a>\n  );\n};\n","import React from 'react';\nimport cn from 'classnames';\n\nimport { Todo } from '../../types/Todo';\nimport { UserInfo } from '../UserInfo';\n\ntype Props = {\n  todo: Todo;\n};\n\nexport const TodoInfo: React.FC<Props> = ({ todo }) => {\n  const {\n    id,\n    title,\n    user,\n    completed,\n  } = todo;\n\n  return (\n    <article\n      data-id={id}\n      className={cn('TodoInfo',\n        { 'TodoInfo--completed': completed })}\n    >\n\n      <h2 className=\"TodoInfo__title\">\n        {title}\n      </h2>\n\n      { user && <UserInfo user={user} /> }\n    </article>\n  );\n};\n","import React from 'react';\nimport { TodoInfo } from '../TodoInfo';\nimport { Todo } from '../../types/Todo';\n\ntype Props = {\n  todos: Todo[]\n};\n\nexport const TodoList: React.FC<Props> = ({ todos }) => {\n  return (\n    <section className=\"TodoList\">\n      {todos.map(todo => (\n        <TodoInfo key={todo.id} todo={todo} />\n      ))}\n    </section>\n  );\n};\n","export default [\n  {\n    id: 1,\n    name: 'Leanne Graham',\n    username: 'Bret',\n    email: 'Sincere@april.biz',\n  },\n  {\n    id: 2,\n    name: 'Ervin Howell',\n    username: 'Antonette',\n    email: 'Shanna@melissa.tv',\n  },\n  {\n    id: 3,\n    name: 'Clementine Bauch',\n    username: 'Samantha',\n    email: 'Nathan@yesenia.net',\n  },\n  {\n    id: 4,\n    name: 'Patricia Lebsack',\n    username: 'Karianne',\n    email: 'Julianne.OConner@kory.org',\n  },\n  {\n    id: 5,\n    name: 'Chelsey Dietrich',\n    username: 'Kamren',\n    email: 'Lucio_Hettinger@annie.ca',\n  },\n  {\n    id: 6,\n    name: 'Mrs. Dennis Schulist',\n    username: 'Leopoldo_Corkery',\n    email: 'Karley_Dach@jasper.info',\n  },\n  {\n    id: 7,\n    name: 'Kurtis Weissnat',\n    username: 'Elwyn.Skiles',\n    email: 'Telly.Hoeger@billy.biz',\n  },\n  {\n    id: 8,\n    name: 'Nicholas Runolfsdottir V',\n    username: 'Maxime_Nienow',\n    email: 'Sherwood@rosamond.me',\n  },\n  {\n    id: 9,\n    name: 'Glenna Reichert',\n    username: 'Delphine',\n    email: 'Chaim_McDermott@dana.io',\n  },\n  {\n    id: 10,\n    name: 'Clementina DuBuque',\n    username: 'Moriah.Stanton',\n    email: 'Rey.Padberg@karina.biz',\n  },\n];\n","import React, { useState } from 'react';\nimport './App.scss';\nimport { User } from './types/User';\nimport { Todo } from './types/Todo';\nimport { TodoList } from './components/TodoList';\n\nimport usersFromServer from './api/users';\nimport todosFromServer from './api/todos';\n\nconst getUserById = (userId: number): User | null => (\n  usersFromServer.find(user => (user.id === userId)) || null\n);\n\nconst getUserByName = (userName: string): User | null => (\n  usersFromServer.find(user => (user.name === userName)) || null\n);\n\nconst getTodos: Todo[] = todosFromServer.map((todo) => ({\n  ...todo,\n  user: getUserById(todo.userId),\n}));\n\nexport const App: React.FC = () => {\n  const [todos, setTodos] = useState(getTodos);\n  const [title, setTitle] = useState('');\n  const [userSelect, setUserSelect] = useState('');\n  const [isTitleValid, setIsTitleValid] = useState(false);\n  const [isUserValid, setIsUserValid] = useState(false);\n\n  const handleFormSubmit = (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n\n    if (!title) {\n      setIsTitleValid(true);\n    }\n\n    if (!userSelect) {\n      setIsUserValid(true);\n    }\n\n    if (!userSelect || !title) {\n      return;\n    }\n\n    setTodos((currentTodos) => {\n      const maxTodoId = Math.max(...currentTodos.map(todo => todo.id));\n      const newTodo = getUserByName(userSelect);\n\n      return [\n        ...currentTodos,\n        {\n          id: maxTodoId + 1,\n          title,\n          completed: false,\n          userId: newTodo ? newTodo.id : null,\n          user: newTodo,\n        },\n      ];\n    });\n\n    setTitle('');\n    setUserSelect('');\n  };\n\n  const handleTitleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setTitle(event.target.value);\n    setIsTitleValid(false);\n  };\n\n  const handleUserChange = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    const { value } = event.target;\n\n    setUserSelect(value);\n    setIsUserValid(false);\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>Add todo form</h1>\n      <form\n        action=\"/api/users\"\n        method=\"POST\"\n        onSubmit={handleFormSubmit}\n      >\n        <div className=\"field\">\n          <label>\n            {'Title: '}\n            <input\n              data-cy=\"titleInput\"\n              type=\"text\"\n              value={title}\n              placeholder=\"Enter a title\"\n              onChange={handleTitleChange}\n            />\n          </label>\n\n          {isTitleValid && (\n            <span className=\"error\">Please enter a title</span>\n          )}\n        </div>\n\n        <div className=\"field\">\n          <label>\n            {'User: '}\n            <select\n              data-cy=\"userSelect\"\n              value={userSelect}\n              onChange={handleUserChange}\n            >\n              <option\n                value=\"\"\n                disabled\n              >\n                Choose a user\n              </option>\n\n              {usersFromServer.map((user) => (\n                <option key={user.id} value={user.name}>\n                  {user.name}\n                </option>\n              ))}\n            </select>\n          </label>\n          {isUserValid && (\n            <span className=\"error\">Please choose a user</span>\n          )}\n        </div>\n\n        <button type=\"submit\" data-cy=\"submitButton\">\n          Add\n        </button>\n      </form>\n      <TodoList todos={todos} />\n    </div>\n  );\n};\n","export default [\n  {\n    id: 1,\n    title: 'delectus aut autem',\n    completed: true,\n    userId: 1,\n  },\n  {\n    id: 15,\n    title: 'some other todo',\n    completed: false,\n    userId: 1,\n  },\n  {\n    id: 2,\n    title: 'quis ut nam facilis et officia qui',\n    completed: false,\n    userId: 4,\n  },\n];\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}